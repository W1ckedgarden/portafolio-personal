import './InterestsList.css'  // Importa los estilos espec√≠ficos del componente
import { useState, forwardRef, useImperativeHandle } from 'react'  // Importa hooks de React

// Mapeo de iconos para cada secci√≥n
const SECTION_ICONS = {  // Define los iconos para cada secci√≥n
  'Sobre Mi': 'üë§',
  'Estudios': 'üéì',
  '√öltimo Trabajo': 'üíº',
  'Ubicaci√≥n': 'üìç',
  'Contacto': 'üìß'
}

const InterestsList = forwardRef((props, ref) => {  // Componente que muestra la lista de intereses del usuario
  const [interests, setInterests] = useState([])  // Estado para almacenar los intereses del usuario
  const [alertMessage, setAlertMessage] = useState('')  // Estado para el mensaje de alerta
  const [showAlert, setShowAlert] = useState(false)  // Estado para controlar la visibilidad de la alertas

  const addToInterests = (sectionName) => {  // Funci√≥n para agregar una secci√≥n a la lista de intereses
    // Evitar duplicados
    if (interests.includes(sectionName)) {  // Verifica si el inter√©s ya est√° en la lista
      showAlertMessage('¬°Ese inter√©s ya est√° en tu lista!')  // Muestra un mensaje de alerta si el inter√©s ya existe
      return  // Sale de la funci√≥n si el inter√©s ya est√° en la lista
    }

    setInterests([...interests, sectionName])  // Agrega el nuevo inter√©s a la lista
    showAlertMessage('¬°Inter√©s agregado a la lista!')  // Muestra un mensaje de alerta indicando que el inter√©s fue agregado
  }

  // Nueva funci√≥n para eliminar intereses
  const removeFromInterests = (sectionName) => {  // Funci√≥n para eliminar una secci√≥n de la lista de intereses
    setInterests(interests.filter(interest => interest !== sectionName))  // Filtra la lista de intereses para eliminar el inter√©s especificado
    showAlertMessage('¬°Inter√©s eliminado de la lista!')  // Muestra un mensaje de alerta indicando que el inter√©s fue eliminado
  }

  const showAlertMessage = (message) => {  // Funci√≥n para mostrar un mensaje de alerta
    setAlertMessage(message)  // Establece el mensaje de alerta
    setShowAlert(true)  // Muestra la alerta
    setTimeout(() => {  // Oculta la alerta despu√©s de 1.8 segundos
      setShowAlert(false)  // Oculta la alerta
    }, 1800)  // 1.8 segundos
  }

  // Exponer m√©todos al componente padre
  useImperativeHandle(ref, () => ({  // Permite que el componente padre acceda a los m√©todos del componente InterestsList
    addToInterests  // M√©todo para agregar intereses desde el componente padre
  }))

  return (  // Renderiza la lista de intereses
    <>  {/* Fragmento que agrupa los elementos sin a√±adir un nodo extra al DOM */}
      <section id='favoritos-panel' className="favoritos-panel">  {/* Secci√≥n que muestra la lista de intereses */}
        <h3>Mis intereses:</h3>  {/* T√≠tulo de la secci√≥n de intereses */}
        <ul id="favoritos-lista">  {/* Lista de intereses */}
          {interests.length === 0 ? (  // Si no hay intereses, muestra un mensaje
            <li className="lista-vacia">  {/* Mensaje cuando la lista de intereses est√° vac√≠a */}
              üåü Agrega secciones que te interesen usando los botones ‚≠ê
            </li>  // Fin del mensaje cuando la lista de intereses est√° vac√≠a
          ) : (  // Si hay intereses, muestra cada uno en la lista
            interests.map((interest, index) => (  // Mapea cada inter√©s a un elemento de lista
              <li key={index} className="interes-item">  {/* Elemento de lista para cada inter√©s */}
                <div className="interes-contenido">  {/* Contenedor para el contenido del inter√©s */}
                  <span className="interes-icono">  {/* Icono del inter√©s */}
                    {SECTION_ICONS[interest] || '‚≠ê'}  {/* Muestra el icono correspondiente o un icono por defecto */}
                  </span>  {/* Fin del icono del inter√©s */}
                  <span className="interes-texto">  {/* Texto del inter√©s */}
                    {interest}  {/* Nombre del inter√©s */}
                  </span>  {/* Fin del texto del inter√©s */}
                </div>  {/* Fin del contenedor del contenido del inter√©s */}
                <button   // Bot√≥n para eliminar el inter√©s
                  className="btn-eliminar"  // Clase para el bot√≥n de eliminar inter√©s
                  onClick={() => removeFromInterests(interest)}  // Llama a la funci√≥n para eliminar el inter√©s al hacer clic
                  title={`Eliminar ${interest}`}  // T√≠tulo del bot√≥n para eliminar el inter√©s
                >
                  ‚úï
                </button>  {/* Fin del bot√≥n para eliminar el inter√©s */}
              </li>  // Fin del elemento de lista para el inter√©s
            ))
          )}
        </ul>  {/* Fin de la lista de intereses */}
      </section>  {/* Fin de la secci√≥n que muestra la lista de intereses */}

      <div
        id="alerta-favoritos"  // ID para la alerta de favoritos
        className={showAlert ? 'alerta-favoritos-activa' : ''}  // Clase que se activa cuando se muestra la alerta
      >  {/* Contenedor para la alerta de favoritos */}
        {alertMessage}  {/* Mensaje de alerta que se muestra */}
      </div>  {/* Fin de la alerta que se muestra cuando se agrega o elimina un inter√©s */}
    </>  // Fin del fragmento que agrupa los elementos sin a√±adir un nodo extra al DOM
  )
})

InterestsList.displayName = 'InterestsList'  // Establece el nombre del componente para depuraci√≥n

export default InterestsList  // Exporta el componente InterestsList para que pueda ser utilizado en otros archivos